{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPB2CQvZIwEEuq6CYohIWd/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LGsSIVT4thIh","executionInfo":{"status":"ok","timestamp":1685307290110,"user_tz":-60,"elapsed":5286,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"ed8a3882-aad5-4ee8-8955-c23dbf77fad2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[ 56.,  70.],\n","        [ 81., 101.],\n","        [119., 133.],\n","        [ 22.,  37.],\n","        [103., 119.],\n","        [ 56.,  70.],\n","        [ 81., 101.],\n","        [119., 133.],\n","        [ 22.,  37.],\n","        [103., 119.],\n","        [ 56.,  70.],\n","        [ 81., 101.],\n","        [119., 133.],\n","        [ 22.,  37.],\n","        [103., 119.]])"]},"metadata":{},"execution_count":1}],"source":["#import Libraries\n","import torch\n","import torch.nn as nn\n","import pandas as pd\n","import numpy as np\n","# Input (temp, rainfall, humidity)\n","inputs = np.array([[73, 67, 43], [91, 88, 64], [87, 134, 58],\n","                   [102, 43, 37], [69, 96, 70], [73, 67, 43],\n","                   [91, 88, 64], [87, 134, 58], [102, 43, 37],\n","                   [69, 96, 70], [73, 67, 43], [91, 88, 64],\n","                   [87, 134, 58], [102, 43, 37], [69, 96, 70]],\n","                  dtype='float32')\n","# Targets (apples, oranges)\n","targets = np.array([[56, 70], [81, 101], [119, 133],\n","                    [22, 37], [103, 119], [56, 70],\n","                    [81, 101], [119, 133], [22, 37],\n","                    [103, 119], [56, 70], [81, 101],\n","                    [119, 133], [22, 37], [103, 119]],\n","                   dtype='float32')\n","inputs = torch.from_numpy(inputs)\n","targets = torch.from_numpy(targets)\n","inputs\n","targets"]},{"cell_type":"code","source":["# Tensor Data set\n","from torch.utils.data import TensorDataset\n","# Define dataset\n","train_ds = TensorDataset(inputs, targets)\n","train_ds[0:3]\n","#Data loader\n","from torch.utils.data import DataLoader\n","# Define data loader\n","batch_size = 5\n","train_dl = DataLoader(train_ds, batch_size, shuffle=True)"],"metadata":{"id":"2QtK5DhLtlTt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Define linear model\n","model = nn.Linear(3, 2)\n","print(model.weight)\n","print(model.bias)\n","# Parameters\n","list(model.parameters())\n","# Define Loss\n","import torch.nn.functional as F\n","loss_fn = F.mse_loss\n","# Define optimizer\n","opt = torch.optim.SGD(model.parameters(), lr=1e-5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gPb2VSuptsNq","executionInfo":{"status":"ok","timestamp":1685307290173,"user_tz":-60,"elapsed":190,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"84a0a9e6-ecb4-4348-b19f-a426f7a0b360"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Parameter containing:\n","tensor([[ 0.3400, -0.3445, -0.5706],\n","        [ 0.3838, -0.2617, -0.2572]], requires_grad=True)\n","Parameter containing:\n","tensor([0.2455, 0.2361], requires_grad=True)\n"]}]},{"cell_type":"code","source":["# Utility function to train the model\n","def fit(num_epochs, model, loss_fn, opt, train_dl):\n","\n","    # Repeat for given number of epochs\n","    for epoch in range(num_epochs):\n","\n","        # Train with batches of data\n","        for xb,yb in train_dl:\n","\n","            # 1. Generate predictions\n","            pred = model(xb)\n","\n","            # 2. Calculate loss\n","            loss = loss_fn(pred, yb)\n","\n","            # 3. Compute gradients\n","            loss.backward()\n","\n","            # 4. Update parameters using gradients\n","            opt.step()\n","\n","            # 5. Reset the gradients to zero\n","            opt.zero_grad()\n","\n","        # Print the progress\n","        if (epoch+1) % 10 == 0:\n","            print('Epoch [{}/{}], Loss: {:.4f}'.format(epoch+1, num_epochs, loss.item()))\n","#fit model for 100 epochs\n","fit(1000, model, loss_fn , opt ,train_dl)\n","# Generate predictions\n","preds = model(inputs)\n","preds"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GPpvahtqtvM4","executionInfo":{"status":"ok","timestamp":1685307291452,"user_tz":-60,"elapsed":1459,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"25c79e0c-5edf-4c10-91a9-945958465437"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [10/1000], Loss: 909.7233\n","Epoch [20/1000], Loss: 953.6504\n","Epoch [30/1000], Loss: 52.6461\n","Epoch [40/1000], Loss: 235.2012\n","Epoch [50/1000], Loss: 195.7558\n","Epoch [60/1000], Loss: 168.8794\n","Epoch [70/1000], Loss: 129.1732\n","Epoch [80/1000], Loss: 99.6449\n","Epoch [90/1000], Loss: 119.5708\n","Epoch [100/1000], Loss: 65.6105\n","Epoch [110/1000], Loss: 54.1805\n","Epoch [120/1000], Loss: 39.0017\n","Epoch [130/1000], Loss: 58.7320\n","Epoch [140/1000], Loss: 39.5906\n","Epoch [150/1000], Loss: 50.0115\n","Epoch [160/1000], Loss: 28.3936\n","Epoch [170/1000], Loss: 42.9783\n","Epoch [180/1000], Loss: 26.2523\n","Epoch [190/1000], Loss: 36.3600\n","Epoch [200/1000], Loss: 24.3585\n","Epoch [210/1000], Loss: 20.4778\n","Epoch [220/1000], Loss: 26.6332\n","Epoch [230/1000], Loss: 29.9333\n","Epoch [240/1000], Loss: 13.1484\n","Epoch [250/1000], Loss: 4.1269\n","Epoch [260/1000], Loss: 10.0672\n","Epoch [270/1000], Loss: 15.0892\n","Epoch [280/1000], Loss: 15.6405\n","Epoch [290/1000], Loss: 24.3246\n","Epoch [300/1000], Loss: 16.7441\n","Epoch [310/1000], Loss: 12.8885\n","Epoch [320/1000], Loss: 17.8172\n","Epoch [330/1000], Loss: 15.0275\n","Epoch [340/1000], Loss: 10.1301\n","Epoch [350/1000], Loss: 1.6329\n","Epoch [360/1000], Loss: 1.5122\n","Epoch [370/1000], Loss: 12.8692\n","Epoch [380/1000], Loss: 8.3018\n","Epoch [390/1000], Loss: 4.2657\n","Epoch [400/1000], Loss: 5.9014\n","Epoch [410/1000], Loss: 7.4389\n","Epoch [420/1000], Loss: 4.7252\n","Epoch [430/1000], Loss: 1.2861\n","Epoch [440/1000], Loss: 6.1147\n","Epoch [450/1000], Loss: 5.8043\n","Epoch [460/1000], Loss: 3.8826\n","Epoch [470/1000], Loss: 3.7512\n","Epoch [480/1000], Loss: 4.9771\n","Epoch [490/1000], Loss: 5.0629\n","Epoch [500/1000], Loss: 2.5161\n","Epoch [510/1000], Loss: 1.1340\n","Epoch [520/1000], Loss: 6.2874\n","Epoch [530/1000], Loss: 2.7901\n","Epoch [540/1000], Loss: 3.6928\n","Epoch [550/1000], Loss: 3.7310\n","Epoch [560/1000], Loss: 4.6827\n","Epoch [570/1000], Loss: 2.6850\n","Epoch [580/1000], Loss: 2.6495\n","Epoch [590/1000], Loss: 1.7468\n","Epoch [600/1000], Loss: 1.3924\n","Epoch [610/1000], Loss: 2.5069\n","Epoch [620/1000], Loss: 2.5118\n","Epoch [630/1000], Loss: 3.0616\n","Epoch [640/1000], Loss: 0.6321\n","Epoch [650/1000], Loss: 2.0779\n","Epoch [660/1000], Loss: 1.6585\n","Epoch [670/1000], Loss: 2.5513\n","Epoch [680/1000], Loss: 1.1983\n","Epoch [690/1000], Loss: 2.3416\n","Epoch [700/1000], Loss: 2.1976\n","Epoch [710/1000], Loss: 2.5855\n","Epoch [720/1000], Loss: 1.6624\n","Epoch [730/1000], Loss: 2.5010\n","Epoch [740/1000], Loss: 2.4228\n","Epoch [750/1000], Loss: 1.5527\n","Epoch [760/1000], Loss: 0.8992\n","Epoch [770/1000], Loss: 0.6234\n","Epoch [780/1000], Loss: 0.6955\n","Epoch [790/1000], Loss: 1.1192\n","Epoch [800/1000], Loss: 1.8821\n","Epoch [810/1000], Loss: 1.8211\n","Epoch [820/1000], Loss: 1.3085\n","Epoch [830/1000], Loss: 0.9346\n","Epoch [840/1000], Loss: 1.2431\n","Epoch [850/1000], Loss: 1.1481\n","Epoch [860/1000], Loss: 0.7306\n","Epoch [870/1000], Loss: 1.0559\n","Epoch [880/1000], Loss: 1.4286\n","Epoch [890/1000], Loss: 1.3560\n","Epoch [900/1000], Loss: 1.4654\n","Epoch [910/1000], Loss: 0.6259\n","Epoch [920/1000], Loss: 0.8914\n","Epoch [930/1000], Loss: 1.2961\n","Epoch [940/1000], Loss: 0.7098\n","Epoch [950/1000], Loss: 0.8675\n","Epoch [960/1000], Loss: 0.7747\n","Epoch [970/1000], Loss: 0.9365\n","Epoch [980/1000], Loss: 0.8927\n","Epoch [990/1000], Loss: 1.0121\n","Epoch [1000/1000], Loss: 0.8351\n"]},{"output_type":"execute_result","data":{"text/plain":["tensor([[ 57.2390,  70.3876],\n","        [ 81.8203, 100.3140],\n","        [119.4008, 133.6377],\n","        [ 21.2697,  37.2043],\n","        [101.1906, 118.4550],\n","        [ 57.2390,  70.3876],\n","        [ 81.8203, 100.3140],\n","        [119.4008, 133.6377],\n","        [ 21.2697,  37.2043],\n","        [101.1906, 118.4550],\n","        [ 57.2390,  70.3876],\n","        [ 81.8203, 100.3140],\n","        [119.4008, 133.6377],\n","        [ 21.2697,  37.2043],\n","        [101.1906, 118.4550]], grad_fn=<AddmmBackward0>)"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["from sklearn.datasets import make_regression\n","import matplotlib.pyplot as plt\n","\n","# Generate regression data\n","X, y = make_regression(n_samples=5, n_features=1, noise=0.1)\n","X_tensor = torch.from_numpy(X).float()\n","y_tensor = torch.from_numpy(y).float()"],"metadata":{"id":"s7VVuU3btzLW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_dataset = TensorDataset(X_tensor,y_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=5, shuffle=True)"],"metadata":{"id":"OeUxpvkTxOM2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch.nn as nn\n","from torch.utils.data import DataLoader,TensorDataset"],"metadata":{"id":"d8_yJqq6xSxV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for input,target in train_dataset:\n","  print(input)\n","  print(target)\n","  break"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YNVFrF-YyDPR","executionInfo":{"status":"ok","timestamp":1685307291470,"user_tz":-60,"elapsed":211,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"a6eeba27-88e5-428e-ddff-d2c818327dba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([0.3836])\n","tensor(14.4254)\n"]}]},{"cell_type":"code","source":["model = nn.Linear(1,1)\n","optimizer = torch.optim.SGD(model.parameters(), lr=0.001)\n","\n","list(model.parameters())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gxplDpzPyemU","executionInfo":{"status":"ok","timestamp":1685307291478,"user_tz":-60,"elapsed":195,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"4a77e1e4-c89a-4f9a-a317-e8b3579b067f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Parameter containing:\n"," tensor([[-0.0129]], requires_grad=True),\n"," Parameter containing:\n"," tensor([0.7064], requires_grad=True)]"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["pred = model(input)\n","pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oO6cMRg2zHZQ","executionInfo":{"status":"ok","timestamp":1685307291482,"user_tz":-60,"elapsed":161,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"54c0c754-f0cd-4bb0-b879-5675d3b2a1aa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([0.7015], grad_fn=<AddBackward0>)"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["target"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XJhs2Y2Uzls9","executionInfo":{"status":"ok","timestamp":1685307291484,"user_tz":-60,"elapsed":145,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"9c1adb23-b889-4623-d317-5500162a4f22"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(14.4254)"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["loss_fn(pred,target)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"teBd0nDj1nmx","executionInfo":{"status":"ok","timestamp":1685307292055,"user_tz":-60,"elapsed":700,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"cce0d16b-9562-46d1-86df-a01f7d7aa483"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-12-7b49a38d1083>:1: UserWarning: Using a target size (torch.Size([])) that is different to the input size (torch.Size([1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss_fn(pred,target)\n"]},{"output_type":"execute_result","data":{"text/plain":["tensor(188.3463, grad_fn=<MseLossBackward0>)"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["def fit(num_epoch,model,loss_fn,opt,train_df):\n","  for epoch in range(num_epoch):\n","    for input,target in train_df:\n","      pred = model(input)\n","      loss = loss_fn(pred,target)\n","\n","      loss.backward()\n","      opt.step()\n","      opt.zero_grad()\n","    if (epoch+1) % 10 == 0:\n","      print('Epoch [{}/{}], Loss: {:.4f}'.format(epoch+1, num_epoch, loss.item()))"],"metadata":{"id":"FRvrnriZ15Hj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fit(200, model, loss_fn , opt ,train_loader)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-_Mt0Air3gwr","executionInfo":{"status":"ok","timestamp":1685307292062,"user_tz":-60,"elapsed":57,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"34a1fc46-16c4-45a7-966e-bcaf7ecd3729"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch [10/200], Loss: 1467.1285\n","Epoch [20/200], Loss: 1467.1285\n","Epoch [30/200], Loss: 1467.1285\n","Epoch [40/200], Loss: 1467.1288\n","Epoch [50/200], Loss: 1467.1285\n","Epoch [60/200], Loss: 1467.1288\n","Epoch [70/200], Loss: 1467.1285\n","Epoch [80/200], Loss: 1467.1285\n","Epoch [90/200], Loss: 1467.1285\n","Epoch [100/200], Loss: 1467.1285\n","Epoch [110/200], Loss: 1467.1284\n","Epoch [120/200], Loss: 1467.1285\n","Epoch [130/200], Loss: 1467.1288\n","Epoch [140/200], Loss: 1467.1285\n","Epoch [150/200], Loss: 1467.1285\n","Epoch [160/200], Loss: 1467.1288\n","Epoch [170/200], Loss: 1467.1285\n","Epoch [180/200], Loss: 1467.1285\n","Epoch [190/200], Loss: 1467.1285\n","Epoch [200/200], Loss: 1467.1285\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-13-8cc61a345f44>:5: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size.\n","  loss = loss_fn(pred,target)\n"]}]},{"cell_type":"code","source":["y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nP1wle6q5h18","executionInfo":{"status":"ok","timestamp":1685307292067,"user_tz":-60,"elapsed":55,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"31e43b28-e438-4b15-dad2-79a350e65761"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([14.42543155, 84.38744919, -1.42059578,  4.13746008, 11.9720227 ])"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["model.eval()\n","\n","# Pass the data through the model to get predictions\n","with torch.no_grad():\n","    predictions = model(X_tensor)\n","\n","# Print the predicted outputs\n","print(predictions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"05M_W3Im8SHQ","executionInfo":{"status":"ok","timestamp":1685307292069,"user_tz":-60,"elapsed":40,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"296c12ee-6fe8-4f89-999b-f1594a30fa70"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[0.7015],\n","        [0.6775],\n","        [0.7070],\n","        [0.7050],\n","        [0.7024]])\n"]}]},{"cell_type":"code","source":["X_tensor"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cdQJ37yb-45E","executionInfo":{"status":"ok","timestamp":1685220874748,"user_tz":-60,"elapsed":24,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"f2dbafb2-19ee-4d5b-a2f5-75e072f74981"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([[-0.1625],\n","        [ 0.3083],\n","        [ 0.4914]])"]},"metadata":{},"execution_count":205}]},{"cell_type":"code","source":["import torchvision\n","from torchvision.datasets import MNIST"],"metadata":{"id":"F4svJJyN_dSt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = MNIST(root=\"data/\",download=True)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SrDfopNIKQ5I","executionInfo":{"status":"ok","timestamp":1685462520397,"user_tz":-60,"elapsed":383,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"802a9ccd-e5df-449a-d20b-13188b99e15e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to data/MNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9912422/9912422 [00:00<00:00, 102099696.82it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/MNIST/raw/train-images-idx3-ubyte.gz to data/MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to data/MNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 28881/28881 [00:00<00:00, 50705606.46it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/MNIST/raw/train-labels-idx1-ubyte.gz to data/MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to data/MNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1648877/1648877 [00:00<00:00, 26785639.47it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/MNIST/raw/t10k-images-idx3-ubyte.gz to data/MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to data/MNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 4542/4542 [00:00<00:00, 2747408.24it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting data/MNIST/raw/t10k-labels-idx1-ubyte.gz to data/MNIST/raw\n","\n"]}]},{"cell_type":"code","source":["len(data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oxe5drKeKfQq","executionInfo":{"status":"ok","timestamp":1685462520399,"user_tz":-60,"elapsed":314,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"f6896e26-4432-4511-d4a0-093ab22ac6ec"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["60000"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["test_data = MNIST(root=\"data/\",train=False)"],"metadata":{"id":"3KLT8OaaKkRk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","\n","len(test_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xQYTg5GhK9IK","executionInfo":{"status":"ok","timestamp":1685462520403,"user_tz":-60,"elapsed":290,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"e6b1b0c8-ae24-4143-bb51-7370caa21a90"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["10000"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T28taa11LB61","executionInfo":{"status":"ok","timestamp":1685462520405,"user_tz":-60,"elapsed":281,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"7fb7aa65-4ba5-4ec2-951f-f81cbcb71037"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(<PIL.Image.Image image mode=L size=28x28 at 0x7F09998A2740>, 5)"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt"],"metadata":{"id":"qkX5QpbXLTP6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["image,labels = data[0]\n","plt.imshow(image,cmap=\"gray\")\n","print(\"labels\",labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"wEszBNzwLzxu","executionInfo":{"status":"ok","timestamp":1685462520429,"user_tz":-60,"elapsed":291,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"d74a58f2-86f9-4972-f041-211f33e83da0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["labels 5\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["image,labels = data[10]\n","plt.imshow(image,cmap=\"gray\")\n","print(\"labels:\",labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"xo0w-O1kNFkH","executionInfo":{"status":"ok","timestamp":1685462520433,"user_tz":-60,"elapsed":278,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"ce88b582-ba9d-4203-e386-511611e9c189"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["labels: 3\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# to convert this images to tensor we will use\n","from torchvision.transforms import transforms"],"metadata":{"id":"sj9a7I2LMRdL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = MNIST(root=\"data/\",train=True,transform=transforms.ToTensor())"],"metadata":{"id":"KhNWlXGzM5vK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tensor_image,labels = data[0]\n","print(tensor_image.shape,labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z2fRNdwJNfsh","executionInfo":{"status":"ok","timestamp":1685462520450,"user_tz":-60,"elapsed":277,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"ba3a04c8-c401-4332-b1c0-5b3f4fd716d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([1, 28, 28]) 5\n"]}]},{"cell_type":"code","source":["def split_inices(n,val_pct):\n","  n_val = int(val_pct*n)\n","  idx = np.random.permutation(n)\n","  return idx[n_val:],idx[:n_val]\n","\n","train_df,val_df = split_inices(len(data),0.2)"],"metadata":{"id":"SfhIwvrKNkME"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"9A79ugUKYCPV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_df,val_df = split_inices(len(data),0.2)"],"metadata":{"id":"hW0ExXqUP7vL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WVU4naxPQpBG","executionInfo":{"status":"ok","timestamp":1685462520514,"user_tz":-60,"elapsed":323,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"5772ec6a-70b0-4d1c-e65d-80d8634b5e9e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([28308, 56538, 15160, ..., 35209, 19314, 17742])"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["from torch.utils.data.sampler import SubsetRandomSampler\n","from torch.utils.data.dataloader import DataLoader"],"metadata":{"id":"eyKtRreUQqcn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["batch = 100\n","train_sampler = SubsetRandomSampler(train_df)\n","train_loader =DataLoader(data,\n","                          batch,\n","                          sampler=train_sampler)\n","\n","val_sampler = SubsetRandomSampler(val_df)\n","val_loader = DataLoader(data,\n","                        batch,\n","                        sampler=val_sampler)"],"metadata":{"id":"iiVt0eamR83x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch.nn as nn"],"metadata":{"id":"S38xdUHOR_L2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"mqXgcTw3aMuZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Zcr-0Ey_aL4C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"iGsG6QjLaJGj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["input_size = 28*28\n","num_classes = 10\n","model = nn.Linear(input_size,num_classes)"],"metadata":{"id":"vfrpvl44TcWp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(model.weight.shape)\n","print(model.weight)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NKmoGyKeVy5A","executionInfo":{"status":"ok","timestamp":1685462520575,"user_tz":-60,"elapsed":361,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"d437b3e7-9f6e-4961-deb8-d40d401ab908"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([10, 784])\n","Parameter containing:\n","tensor([[-1.2791e-03,  2.2238e-02, -9.2004e-04,  ...,  2.8218e-02,\n","          5.6518e-05, -1.9201e-02],\n","        [-4.4868e-03,  1.2164e-02, -2.6639e-02,  ..., -1.0498e-02,\n","         -2.8521e-02,  3.4045e-02],\n","        [-1.4721e-02, -2.1171e-02, -2.8982e-02,  ..., -1.3592e-02,\n","          1.7060e-02,  3.5240e-02],\n","        ...,\n","        [-1.2323e-02, -8.4669e-03,  2.2438e-02,  ...,  1.7648e-02,\n","         -1.3620e-02,  2.6119e-03],\n","        [ 3.2075e-02,  1.2176e-02, -3.5497e-02,  ..., -6.1169e-04,\n","         -1.0392e-03, -2.3772e-02],\n","        [ 2.5996e-02, -4.1878e-03,  1.3806e-02,  ...,  6.1319e-04,\n","          2.3055e-02, -2.8681e-02]], requires_grad=True)\n"]}]},{"cell_type":"code","source":["print(model.bias.shape)\n","print(model.bias)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B7gRofmeV4Qi","executionInfo":{"status":"ok","timestamp":1685462523574,"user_tz":-60,"elapsed":31,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"24e04e6c-6f9c-4bc9-e83e-1af42c7a5f09"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([10])\n","Parameter containing:\n","tensor([ 0.0280,  0.0128,  0.0151, -0.0118, -0.0193,  0.0087, -0.0147, -0.0025,\n","         0.0231, -0.0199], requires_grad=True)\n"]}]},{"cell_type":"code","source":["# yes because we need to reshape the size\n","for image,labels in train_loader:\n","  print (image)\n","  print(image.shape)\n","  model(image)\n","  break"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"UQwllQxVWF23","executionInfo":{"status":"error","timestamp":1685462525423,"user_tz":-60,"elapsed":838,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"cb70fdd2-23a0-40c9-b575-590386632627"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          ...,\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.]]],\n","\n","\n","        [[[0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          ...,\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.]]],\n","\n","\n","        [[[0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          ...,\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.]]],\n","\n","\n","        ...,\n","\n","\n","        [[[0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          ...,\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.]]],\n","\n","\n","        [[[0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          ...,\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.]]],\n","\n","\n","        [[[0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          ...,\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.],\n","          [0., 0., 0.,  ..., 0., 0., 0.]]]])\n","torch.Size([100, 1, 28, 28])\n"]},{"output_type":"error","ename":"RuntimeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-f54a067f92b4>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m   \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m   \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1501\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         \u001b[0;31m# Do not call functions when jit is used\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1503\u001b[0m         \u001b[0mfull_backward_hooks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnon_full_backward_hooks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/linear.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinear\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbias\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mextra_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mRuntimeError\u001b[0m: mat1 and mat2 shapes cannot be multiplied (2800x28 and 784x10)"]}]},{"cell_type":"code","source":["class MnistModel(nn.Module):\n","  def __init__(self):\n","    super(). __init__()\n","    self.linear = nn.Linear(input_size,num_classes)\n","\n","  def forward(self,xb):\n","    xb= xb.reshape(-1,28*28)\n","    out = self.linear(xb)\n","    return out\n","\n","model = MnistModel()"],"metadata":{"id":"ri-ny4v4X3gg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"JLHB0KHMb2fu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["list(model.parameters())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"neEGDdAiZU4b","executionInfo":{"status":"ok","timestamp":1685462529867,"user_tz":-60,"elapsed":54,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"b601e4b8-190b-443e-f581-2c089343022c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Parameter containing:\n"," tensor([[ 0.0044,  0.0147, -0.0179,  ...,  0.0261, -0.0130,  0.0338],\n","         [-0.0079,  0.0153,  0.0128,  ..., -0.0155, -0.0215,  0.0333],\n","         [-0.0149, -0.0054, -0.0214,  ...,  0.0100, -0.0099,  0.0180],\n","         ...,\n","         [-0.0106,  0.0282, -0.0194,  ..., -0.0157,  0.0010, -0.0292],\n","         [ 0.0289, -0.0244,  0.0063,  ..., -0.0249,  0.0152, -0.0056],\n","         [ 0.0175, -0.0180, -0.0338,  ..., -0.0342,  0.0219, -0.0338]],\n","        requires_grad=True),\n"," Parameter containing:\n"," tensor([-0.0227, -0.0272,  0.0018,  0.0052, -0.0349, -0.0170, -0.0268,  0.0219,\n","          0.0057,  0.0123], requires_grad=True)]"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# now it will work\n","for image,labels in train_loader:\n","  out = model(image)\n","  break\n","print(\"output.shape\",out.shape)\n","print(\"sample output\", out[:2].data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"20EHJrJhaIhj","executionInfo":{"status":"ok","timestamp":1685462530330,"user_tz":-60,"elapsed":512,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"47e88735-1643-4aa3-ef51-33ea5d74b20d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["output.shape torch.Size([100, 10])\n","sample output tensor([[-0.0059,  0.0826, -0.0351,  0.0405,  0.0830,  0.0085,  0.1028, -0.2363,\n","         -0.2015, -0.0413],\n","        [-0.6844, -0.2194, -0.4413,  0.0294,  0.3428, -0.1714,  0.4455, -0.2061,\n","         -0.1893, -0.0048]])\n"]}]},{"cell_type":"code","source":["# aply softmax\n","import torch.nn.functional as f\n","import torch"],"metadata":{"id":"xi-KNKhvakw3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["prob = f.softmax(out,dim=1)\n","print(\"sample probablity:\\n\",prob[:2].data)\n","print(\"sum:\",torch.sum(prob[1]).item())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hy29w9w7cDPM","executionInfo":{"status":"ok","timestamp":1685462531451,"user_tz":-60,"elapsed":37,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"bf712e06-32ed-4112-daf2-ad62e8b6f127"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["sample probablity:\n"," tensor([[0.1009, 0.1102, 0.0979, 0.1056, 0.1102, 0.1023, 0.1124, 0.0801, 0.0829,\n","         0.0973],\n","        [0.0535, 0.0852, 0.0682, 0.1092, 0.1494, 0.0893, 0.1656, 0.0863, 0.0878,\n","         0.1055]])\n","sum: 1.0\n"]}]},{"cell_type":"code","source":["max_prob,pred = torch.max(prob,dim=1)\n","print(pred)\n","#print(max_prob)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rIywE7oKcnmb","executionInfo":{"status":"ok","timestamp":1685462531453,"user_tz":-60,"elapsed":35,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"7fcc9c3c-8ecc-4d8c-87a8-79702537d092"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([6, 6, 6, 3, 3, 4, 9, 3, 6, 4, 5, 6, 6, 3, 6, 5, 6, 6, 6, 3, 6, 2, 6, 9,\n","        4, 4, 6, 8, 3, 6, 3, 6, 3, 6, 6, 4, 5, 3, 3, 6, 6, 6, 8, 3, 6, 4, 9, 3,\n","        6, 8, 4, 6, 6, 6, 6, 3, 6, 3, 6, 4, 6, 8, 6, 6, 8, 6, 8, 3, 9, 6, 6, 4,\n","        6, 6, 6, 4, 3, 4, 6, 4, 4, 9, 9, 6, 6, 3, 6, 4, 6, 3, 9, 6, 5, 9, 8, 2,\n","        6, 6, 3, 4])\n"]}]},{"cell_type":"code","source":["labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TcrGfamwdsdW","executionInfo":{"status":"ok","timestamp":1685462533734,"user_tz":-60,"elapsed":26,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"fe7f29a3-8810-4130-82fb-f15a67a68d40"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor([1, 0, 1, 0, 3, 8, 8, 6, 5, 1, 3, 3, 6, 5, 5, 1, 6, 8, 3, 5, 6, 0, 2, 8,\n","        5, 6, 8, 7, 9, 6, 3, 8, 4, 4, 9, 3, 0, 1, 8, 5, 1, 1, 9, 3, 0, 4, 6, 8,\n","        9, 9, 4, 2, 7, 2, 5, 5, 5, 3, 6, 1, 7, 4, 2, 5, 7, 8, 3, 3, 1, 5, 6, 1,\n","        7, 2, 8, 7, 0, 6, 1, 2, 8, 8, 3, 8, 9, 8, 3, 2, 0, 4, 1, 7, 0, 2, 2, 0,\n","        8, 9, 4, 2])"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["# chek accuracy\n","def accuracy(l1,l2):\n","  return (torch.sum(l1==l2).item()) / len(l1)"],"metadata":{"id":"aZEGxrgvd-xv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["accuracy(pred,labels)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0A1aqowgeGxN","executionInfo":{"status":"ok","timestamp":1685462535952,"user_tz":-60,"elapsed":15,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"b949b96e-7f59-4dce-bba9-63b0b8ca12ae"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.13"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["loss_fn = f.cross_entropy\n","loss = loss_fn(out,labels)"],"metadata":{"id":"PCo75rnaebHy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I9AjULZphih_","executionInfo":{"status":"ok","timestamp":1685462540340,"user_tz":-60,"elapsed":22,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"f94d54f4-c81f-4ac8-fe9d-e36029c9d984"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["tensor(2.3378, grad_fn=<NllLossBackward0>)"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":["optim = torch.optim.SGD(model.parameters(),lr=0.001)"],"metadata":{"id":"Km9ZqdlqhxeM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# we fist define the loss_batch function\n","def loss_batch(model , loss_fn ,xb ,yb ,opt=None ,metric=None):\n","  # cal loss\n","  pred = model(xb)\n","  loss = loss_fn(pred,yb)\n","  if opt is not None:\n","    #compute gradient\n","    loss.backward()\n","    #update param\n","    opt.step()\n","    # reset gradient to zero\n","    opt.zero_grad()\n","\n","  metric_result = None\n","  if metric is not None:\n","    #compute the metric\n","    metric_result = metric(pred,yb)\n","    # return loss and len of the batch,metric\n","  return loss.item(), len(xb), metric_result"],"metadata":{"id":"swrCnyt3ibL4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# we define the evaluation function: wich is the overall loss and accuracy\n","def evaluate(model,loss_fn,test_data,metric=None):\n","  with torch.no_grad():\n","    # pass each batch through the model\n","    result = [loss_batch(model , loss_fn ,xb ,yb ,metric=metric)\n","              for xb,yb in test_data]\n","    # seperate losses count and metric\n","    losses ,num , metric = zip(*result)\n","    # total size of the datasets\n","    total = np.sum(num)\n","    # avg loss across batches\n","    avg_loss = np.sum(np.multiply(losses,num)) / total\n","    if metric is not None:\n","      # avg of metric across batches\n","      avg_metric = np.sum(np.multiply(metric,num)) / total\n","    return avg_loss,total,avg_metric\n"],"metadata":{"id":"oJObhen-bPaK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# accuracy function\n","def accuracy(output,labels):\n","  # cal the max and we only care about the index wich is _\n","  _,pred = torch.max(output,dim=1)\n","  return torch.sum(pred==labels).item()/len(pred)"],"metadata":{"id":"qS0wCGx3bPl6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["test_loss,total,test_accu = evaluate(model,loss_fn,val_loader,accuracy)\n","print(\"loss: {:.4f} Accuracy {:.4f}\".format(test_loss,test_accu))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1WpD4-kSbVni","executionInfo":{"status":"ok","timestamp":1685465145703,"user_tz":-60,"elapsed":1954,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"20020b94-5007-458e-8060-80d4347cde59"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["loss: 2.3195 Accuracy 0.1452\n"]}]},{"cell_type":"code","source":["# define fit function quite easy using the loss_batch and evaluate\n","def fit(epochs,model,loss_fn,opt,train_data,test_data,metric=None):\n","  for epoch in range(epochs):\n","    # training\n","    for xb,yb in train_data:\n","      # we store it in loss but we dont really need it\n","      loss,_,_ = loss_batch(model , loss_fn ,xb ,yb ,opt)\n","\n","    # evaluate\n","    result = evaluate(model,loss_fn,test_data,metric)\n","    test_loss,total,test_metric = result\n","\n","     # print progress\n","    if metric is None:\n","      print(\"Epoch: [{}/{}], Loss: {:.4f}\".format(epoch+1,epoch,test_loss))\n","    else:\n","      print(\"Epoch: [{}/{}], Loss: {:.4f}, {}, {:.4f}\".format(epoch+1,epochs,test_loss,metric.__name__,test_metric))"],"metadata":{"id":"W4jullkYbaiO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model = MnistModel()\n","optim = torch.optim.SGD(model.parameters(),lr=0.001)"],"metadata":{"id":"VWaYQ2oSnqWI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fit(20,model,loss_fn,optim,train_loader,val_loader,accuracy)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-f0XwEbPn5Sl","executionInfo":{"status":"ok","timestamp":1685467278366,"user_tz":-60,"elapsed":185538,"user":{"displayName":"Musa Muhammad","userId":"05399772858105698249"}},"outputId":"c901f691-b7a0-4f3e-b8a9-02894d38c019"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: [1/20], Loss: 0.6728, accuracy, 0.8532\n","Epoch: [2/20], Loss: 0.6574, accuracy, 0.8552\n","Epoch: [3/20], Loss: 0.6434, accuracy, 0.8568\n","Epoch: [4/20], Loss: 0.6306, accuracy, 0.8580\n","Epoch: [5/20], Loss: 0.6190, accuracy, 0.8604\n","Epoch: [6/20], Loss: 0.6083, accuracy, 0.8619\n","Epoch: [7/20], Loss: 0.5984, accuracy, 0.8638\n","Epoch: [8/20], Loss: 0.5891, accuracy, 0.8652\n","Epoch: [9/20], Loss: 0.5806, accuracy, 0.8659\n","Epoch: [10/20], Loss: 0.5726, accuracy, 0.8672\n","Epoch: [11/20], Loss: 0.5652, accuracy, 0.8678\n","Epoch: [12/20], Loss: 0.5581, accuracy, 0.8691\n","Epoch: [13/20], Loss: 0.5515, accuracy, 0.8696\n","Epoch: [14/20], Loss: 0.5454, accuracy, 0.8701\n","Epoch: [15/20], Loss: 0.5395, accuracy, 0.8707\n","Epoch: [16/20], Loss: 0.5339, accuracy, 0.8718\n","Epoch: [17/20], Loss: 0.5287, accuracy, 0.8722\n","Epoch: [18/20], Loss: 0.5237, accuracy, 0.8725\n","Epoch: [19/20], Loss: 0.5189, accuracy, 0.8731\n","Epoch: [20/20], Loss: 0.5144, accuracy, 0.8734\n"]}]},{"cell_type":"code","source":["test_data = MNIST(root=\"data/\",train=False,transform=transforms.ToTensor())"],"metadata":{"id":"lEPBr72joaYp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["img,labels = test_data[0]\n","plt.imshow(img,cmap=\"gray\")\n","print(\"shape\",img.shape)\n","print(\"label\",labels)"],"metadata":{"id":"NaxRIRngrnyW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# . unsqueeze(0) add one dimension this become like batch of one dimension\n","img.unsqueeze(0).shape"],"metadata":{"id":"1NhbLNocsCzM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def prediction_imge(img,model):\n","  xb = img.unsqueeze(0)\n","  yb = model(xb)\n","  _,pred = torch.max(yb,dim=1)\n","  return pred[0].item()"],"metadata":{"id":"3_4kkDcytKOT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"QikjivJFwRrT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["img,labels = test_data[2]\n","plt.imshow(img,cmap=\"gray\")\n","print(\"labe..\",labels,\"predicted..\",prediction_imge(img,model))"],"metadata":{"id":"RKO91V6Ptnja"},"execution_count":null,"outputs":[]}]}